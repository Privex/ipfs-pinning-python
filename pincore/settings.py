"""
Django settings for pincore project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
import sys
import dotenv
import logging
from pathlib import Path
from os import getenv as env

# from django.contrib.auth.models import User
from privex.helpers import empty, random_str, env_bool, env_keyval, env_csv, env_int

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from privex.loghelper import LogHelper

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Deal with the issue of conflicting dotenv packages by trying both methods...
ENV_FILE = str(BASE_DIR / '.env')
try:
    dotenv.load_dotenv(ENV_FILE)
except AttributeError:
    dotenv.read_dotenv(ENV_FILE)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env_bool('DEBUG', False)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', None)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


def _suggest_secret():
    _abs_env = BASE_DIR / '.env'
    print("\nPlease generate a secure random string used to encrypt sensitive data such as user sessions")
    print(f"Place the following line into the file {_abs_env!s} - for production we recommend generating it by hand.")
    print(f"\nSECRET_KEY={random_str(size=64)}\n")


if empty(SECRET_KEY):
    if not DEBUG:
        print('!!! Critical ERROR !!! No SECRET_KEY set in .env! Cannot continue.')
        _suggest_secret()
        sys.exit()
    print(" !!! WARNING !!! No SECRET_KEY has been set in .env")
    print(" !!! WARNING !!! As DEBUG is currently set to True, we'll use the default hardcoded development secret key")
    print(" !!! WARNING !!! In production mode (DEBUG=False), please be warned that the application will refuse")
    print(" !!! WARNING !!! to start unless you set SECRET_KEY correctly.")
    _suggest_secret()
    SECRET_KEY = "Th1sIsAPlaceH0lderS3cretKÂ£yF@rDev3l0pm3ntPurpO$es"


# ALLOWED_HOSTS defines a list of hostnames/ips that this app can be accessed from
# In DEBUG, we add localhost/127.0.0.1 by default, as well as when ALLOWED_HOSTS isn't set in .env
# Specify allowed hosts in .env comma separated, e.g. ALLOWED_HOSTS=example.org,127.0.0.1,example.com
ALLOWED_HOSTS = env_csv('ALLOWED_HOSTS', ['pxe.privex.bz', 'pxe.privex.dev'])
ALLOWED_HOSTS += ['127.0.0.1', 'localhost'] if empty(ALLOWED_HOSTS, itr=True) or DEBUG else []

ADMINS = env_keyval('ADMINS', [
    ('Chris (Someguy123)', 'chris@privex.io'),
    ('Kale', 'kale@privex.io'),
])


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'pinapp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pincore.urls'

###
# Outgoing Email config, for notifications
###

EMAIL_SUBJECT_PREFIX = env('EMAIL_SUBJECT_PREFIX', '[Privex IPFS] ')  # Used as a subject prefix for emails sent to admins from the app
SITE_URL = env('SITE_URL', 'https://ipfs.wtf')  # Emails have no idea what domain they're running on.
SERVER_EMAIL = env('SERVER_EMAIL', 'noreply@privex.io')  # The email to use by default when sending outgoing emails

EMAIL_BACKEND = env('EMAIL_BACKEND', None)
if not EMAIL_BACKEND: EMAIL_BACKEND = 'django.core.mail.backends.' + ('console.EmailBackend' if DEBUG else 'smtp.EmailBackend')

# Hostname / IP of SMTP server, must be set in production for outgoing SMTP emails
EMAIL_HOST = env('EMAIL_HOST', None)

if empty(EMAIL_HOST) and not DEBUG: EMAIL_HOST = 'smtp.privex.io'

if EMAIL_HOST is not None:
    EMAIL_PORT = env_int('EMAIL_PORT', 587)  # Port number to connect to email server
    EMAIL_HOST_USER = env('EMAIL_USER', None)  # Username for email server login
    EMAIL_HOST_PASSWORD = env('EMAIL_PASSWORD', None)  # Password for email server login
    # Only enable ONE of these, if required
    EMAIL_USE_TLS = env_bool('EMAIL_USE_TLS', True)  # Use TLS encryption or not
    EMAIL_USE_SSL = env_bool('EMAIL_USE_SSL', False)  # Use SSL encryption or not
else:
    # If you're using the SMTP backend in production, and you don't have an email server hostname/ip set
    # then we change your email backend to dummy (outgoing emails are simply dropped)
    if EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
        EMAIL_BACKEND = 'django.core.mail.backends.dummy.EmailBackend'

# Valid environment log levels (from least to most severe) are:
# DEBUG, INFO, WARNING, ERROR, FATAL, CRITICAL
LOG_LEVEL = env('LOG_LEVEL', None)
LOG_LEVEL = logging.getLevelName(str(LOG_LEVEL).upper()) if LOG_LEVEL is not None else None

if LOG_LEVEL is None:
    LOG_LEVEL = logging.DEBUG if DEBUG else logging.INFO

LOG_FORMATTER = logging.Formatter('[%(asctime)s]: %(name)-55s -> %(funcName)-20s : %(levelname)-8s:: %(message)s')
# LOG_FORMATTER = logging.Formatter('[%(asctime)s]: %(funcName)-14s : %(levelname)-8s:: %(message)s')

LOG_DIR = env('LOG_DIR', BASE_DIR / 'logs')

if not LOG_DIR.exists():
    os.makedirs(str(LOG_DIR))

_lh = LogHelper('pinapp', formatter=LOG_FORMATTER, handler_level=logging.DEBUG)

# Log to console with LOG_LEVEL, as well as output logs >=debug / >=warning to respective files
# with automatic daily log rotation (up to 14 days of logs)
_lh.add_console_handler(level=LOG_LEVEL)
_lh.add_timed_file_handler(
    str(BASE_DIR / 'logs' / 'debug.log'),
    when='D', interval=1, backups=14, level=LOG_LEVEL
)
_lh.add_timed_file_handler(
    str(BASE_DIR / 'logs' / 'error.log'),
    when='D', interval=1, backups=14, level=logging.WARNING
)

_lh.copy_logger('pincore')


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'pincore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE':   'django.db.backends.' + env('DB_BACKEND', 'postgresql'),
        'NAME':     env('DB_NAME', 'ipfs_pins'),
        'USER':     env('DB_USER', 'ipfs'),
        'PASSWORD': env('DB_PASS', ''),
        'HOST':     env('DB_HOST', 'localhost'),
    },
    'testing': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME':   BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# AUTH_USER_MODEL = "User"

